#include <iostream>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[BUFFER_SIZE] = {0};

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        std::cerr << "Socket creation failed" << std::endl;
        return -1;
    }    // Create socket file descriptor


    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);//Initiaite server setup 

    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        std::cerr << "Invalid address/Address not supported" << std::endl;
        return -1;
    }    // Convert IPv4 address from text to binary form


    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        std::cerr << "Connection failed" << std::endl;
        return -1;
    }    // Connect to the server


    const char *message = "Hello from client";
    send(sock, message, strlen(message), 0);
    std::cout << "Message sent to server" << std::endl;    // Send a message to the server


    int valread = read(sock, buffer, BUFFER_SIZE);
    std::cout << "Response from server: " << buffer << std::endl;    // Receive a response from the server


    close(sock);//close

    return 0;
}
