#include <iostream>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>

/**
 * TCP Client code (With timeout and chunked transfer support)
 * Usage: ./client <SERVER_IP> <PORT> [BUFFER_SIZE]
 * Example: ./client 127.0.0.1 50500 8192
 * Configurable buffer size (default: 4096 bytes)
 * 5-second timeout for network operations
 * Handles large messages via chunked transfer
 */
int main(int argc, char *argv[]) {
    // Check for Argument 
    if (argc < 3) {
        std::cerr << "Error: Missing arguments\n"
                  << "Usage: " << argv[0] << " <SERVER_IP> <PORT> [BUFFER_SIZE]\n"
                  << "Example: " << argv[0] << " 127.0.0.1 50500\n";
        return -1;
    }

    //Configuration
    const char* server_ip = argv[1];
    int port = atoi(argv[2]);
    int buffer_size = (argc > 3) ? atoi(argv[3]) : 4096;

    //Creation of socket
    char *buffer = new char[buffer_size];
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        std::cerr << "Error: Socket creation failed\n";
        delete[] buffer;
        return -1;
    }

    //Initialize 5-second timeout
    struct timeval timeout {.tv_sec = 5};
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout));

    //Configure server address
    sockaddr_in serv_addr{};
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(port);
    inet_pton(AF_INET, server_ip, &serv_addr.sin_addr);

    //Connection
    if (connect(sock, (sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        std::cerr << "Error: Connection failed (timeout or unreachable)\n";
        delete[] buffer;
        return -1;
    }

    //Data Transmission
    const char *message = "Hello from client";
    for (int sent = 0; sent < strlen(message); ) {
        int bytes = send(sock, message + sent, strlen(message) - sent, 0);
        if (bytes <= 0) {
            std::cerr << "Warning:Only partial message sent\n";
            break;
        }
        sent += bytes;
    }

    //Handle the response 
    std::string response;
    while (true) {
        int bytes = recv(sock, buffer, buffer_size - 1, 0);
        if (bytes <= 0) break;
        buffer[bytes] = '\0';
        response += buffer;
    }

    if (!response.empty()) {
        std::cout << "Server response: " << response << std::endl;
    } else {
        std::cerr << "Warning: Empty server response\n";
    }

    //Close
    delete[] buffer;
    close(sock);
    return 0;
}
